Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-Aajava=/tmp/wpi-ajava-20230926-091440-3p5qexox/iteration2' '-classpath' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/target/classes:/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-core/target/classes:/homes/gws/jmsy/.m2/repository/org/javassist/javassist/3.29.2-GA/javassist-3.29.2-GA.jar:/homes/gws/jmsy/.m2/repository/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.jar:/homes/gws/jmsy/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/homes/gws/jmsy/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/homes/gws/jmsy/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/homes/gws/jmsy/.m2/repository/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:/homes/gws/jmsy/.m2/repository/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:/homes/gws/jmsy/.m2/repository/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:' '-processor' 'optional' '-d' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/target/classes' '-sourcepath' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java:/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/target/generated-sources/annotations:' '-s' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/target/generated-sources/annotations' '-g' '--release' '8' '--release' '8' '-encoding' 'UTF-8' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ContextHelper.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFacade.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/TypeContainedByType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/LeastUpperBoundLogic.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/cache/Cache.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/cache/NoCache.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/VariableDeclarationExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserInterfaceDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/JavaParserTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserPatternDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/EnumDeclarationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserAnnotationDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/ReferenceConditionalExprHandler.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/DefaultConstructorDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AnnotationDeclarationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/UnaryExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionEnumConstantDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeHelper.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserEnumConstantDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/InferenceVariable.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserTypeParameter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparser/package-info.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserTypeVariableDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserParameterDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ForEachStatementContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/bounds/FalseBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ExpressionHelper.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/ClassLoaderTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistConstructorDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/declarations/common/MethodDeclarationCommonLogic.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/FieldAccessContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserMethodDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionClassDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionConstructorDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ProperUpperBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/logic/ObjectProvider.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionFactory.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ConstraintFormulaSet.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistClassDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionAnnotationDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionInterfaceDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/ConditionalExprResolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserFieldDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionTypeParameter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/Instantiation.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/MethodType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/SwitchEntryContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistEnumConstantDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/BooleanConditionalExprHandler.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/ParameterSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ConstraintFormula.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistUtils.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/bounds/ThrowsBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionEnumDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/logic/AbstractClassDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/MethodReferenceThrowsCompatibleWithType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/AstResolutionUtils.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionMethodResolutionLogic.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AnonymousClassDeclarationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ObjectCreationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserTypeAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/JarTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ForStatementContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/EnclosedExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserAnnotationMemberDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/CatchClauseContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AbstractMethodLikeDeclarationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameCategory.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/FailureHandler.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/InferenceVariableSubstitution.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistEnumDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/CompilationUnitContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/PatternSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistParameterDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/LambdaExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/ExpressionCompatibleWithType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/TypeSolverBuilder.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ConstructorContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistInterfaceDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/utils/SymbolSolverCollectionStrategy.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFactory.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationMemberDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameRole.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/utils/FileUtils.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/core/resolution/TypeVariableResolutionCapability.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/TypeSameAsType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/InstantiationSet.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/VariableSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/comparators/MethodComparator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserConstructorDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/InstanceOfExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/JavaParserTypeDeclarationAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/bounds/SubtypeOfBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/SourceFileInfoExtractor.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/TryWithResourceContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/ReflectionTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/DefaultVisitorAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/AarTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserEnumDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionPatternDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistFieldDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/logic/AbstractTypeDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionParameterDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/LambdaThrowsCompatibleWithType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/TypeSubtypeOfType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionMethodDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionAnnotationMemberDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistMethodDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/Substitution.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ClassOrInterfaceDeclarationContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/NoSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/comparators/ParameterComparator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/AbstractSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionClassAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/package-info.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserSymbolDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionFieldDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/core/resolution/SymbolResolutionCapability.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/BinaryExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/BlockStmtContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/comparators/ClassComparator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistTypeParameter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/CombinedTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/SymbolSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInference.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistFactory.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/IfStatementContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/package-info.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/StatementContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/cache/GuavaCache.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserVariableDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/TypeCompatibleWithType.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/Bound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodReferenceExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistTypeDeclarationAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserAnonymousClassDeclaration.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/bounds/SameAsBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistMethodLikeDeclarationAdapter.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ProperLowerBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/VariableDeclaratorContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/MemoryTypeSolver.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ArrayAccessExprContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarators/FieldSymbolDeclarator.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/bounds/CapturesBound.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/cache/InMemoryCache.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ClassOrInterfaceDeclarationExtendsContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AbstractJavaParserContext.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/package-info.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/core/resolution/MethodUsageResolutionCapability.java' '/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodCallExprContext.java'

/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFacade.java:130: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return expr.toNameExpr().map(this::solve).orElseThrow(() -> new IllegalArgumentException(expr.getClass().getCanonicalName()));
                                                             ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFacade.java:582: error: [method.invocation] call to get() not allowed on the given receiver.
                if (parent instanceof TypeDeclaration && ((TypeDeclaration<?>) parent).getFullyQualifiedName().get().endsWith(className)) {
                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java:411: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    return resolvedTypeName.asClass().getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty"));
                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java:421: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            return ((ResolvedClassDeclaration) typeOfNode).getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty"));
                                                                                      ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java:471: error: [method.invocation] call to get() not allowed on the given receiver.
                    Expression scope = callExpr.getScope().get();
                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeHelper.java:145: error: [method.invocation] call to get() not allowed on the given receiver.
                areCompatibleThroughWideningPrimitiveConversion(s.asReferenceType().toUnboxedType().get(), t)) {
                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:495: error: [method.invocation] call to get() not allowed on the given receiver.
                return b.isAnInstantiation().get();
                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:540: error: [optional.collection] Don't use Optional to wrap a collection type.
    private Optional<Set<InferenceVariable>> smallestSetWithProperty(Set<InferenceVariable> uninstantiatedVariables,
                                             ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:540: error: [optional.collection] Don't use Optional to wrap a collection type.
    private Optional<Set<InferenceVariable>> smallestSetWithProperty(Set<InferenceVariable> uninstantiatedVariables,
                                             ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:545: error: [optional.collection] Don't use Optional to wrap a collection type.
                    return Optional.of(aSubSet);
                                      ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:540: error: [optional.collection] Don't use Optional to wrap a collection type.
    private Optional<Set<InferenceVariable>> smallestSetWithProperty(Set<InferenceVariable> uninstantiatedVariables,
                                             ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:549: error: [optional.collection] Don't use Optional to wrap a collection type.
        return Optional.empty();
                             ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:695: error: [method.invocation] call to get() not allowed on the given receiver.
                            .map(b -> b.isProperLowerBoundFor(alphaI).get().getProperType())
                                                                         ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/BoundSet.java:719: error: [method.invocation] call to get() not allowed on the given receiver.
                                .map(b -> b.isProperUpperBoundFor(alphaI).get().getProperType())
                                                                             ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/LeastUpperBoundLogic.java:55: error: [method.invocation] call to get() not allowed on the given receiver.
            return resolvedTypes.stream().findFirst().get();
                                                         ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AbstractJavaParserContext.java:138: error: [method.invocation] call to get() not allowed on the given receiver.
        return (Node) ((NodeWithOptionalScope)node).getScope().get();
                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AbstractJavaParserContext.java:185: warning: [optional.parameter] Don't use Optional as the type of a formal parameter.
    protected Collection<ResolvedReferenceTypeDeclaration> findTypeDeclarations(Optional<Expression> optScope) {
                                                                                                     ^
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AbstractJavaParserContext.java:256: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                        .orElseThrow(() -> new UnsolvedSymbolException("No common ancestor available for UnionType" + typeOfScope.describe()));
                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserInterfaceDeclaration.java:287: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/JavaParserTypeSolver.java:218: error: [optional.collection] Don't use Optional to wrap a collection type.
            Optional<List<CompilationUnit>> cachedValue = parsedDirectories.get(srcDirectory.toAbsolutePath());
                                            ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typesolvers/JavaParserTypeSolver.java:218: error: [optional.collection] Don't use Optional to wrap a collection type.
            Optional<List<CompilationUnit>> cachedValue = parsedDirectories.get(srcDirectory.toAbsolutePath());
                                                                               ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/JavaParserTypeDeclarationAdapter.java:101: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/JavaParserTypeDeclarationAdapter.java:122: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                        .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/JavaParserTypeDeclarationAdapter.java:134: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/JavaParserTypeDeclarationAdapter.java:278: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/reflectionmodel/ReflectionClassAdapter.java:116: error: [method.invocation] call to get() not allowed on the given receiver.
                    return reflectionFieldDeclaration.replaceType(ancestor.getFieldType(name).get());
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistClassDeclaration.java:316: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return type.orElseThrow(() ->
                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/AnonymousClassDeclarationContext.java:98: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                  .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserAnonymousClassDeclaration.java:173: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new RuntimeException("super class unexpectedly empty"))
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/ObjectCreationContext.java:53: error: [method.invocation] call to get() not allowed on the given receiver.
            Expression scope = wrappedNode.getScope().get();
                                                         ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclaration.java:200: error: [method.invocation] call to get() not allowed on the given receiver.
        return Optional.of(toReferenceType(wrappedNode.getExtendedTypes().getFirst().get()));
                                                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclaration.java:322: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistEnumDeclaration.java:104: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return field.orElseThrow(() -> new RuntimeException("Field " + name + " does not exist in " + ctClass.getName() + "."));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistEnumDeclaration.java:176: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return type.orElseThrow(() ->
                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/CompilationUnitContext.java:309: error: [method.invocation] call to get() not allowed on the given receiver.
                Name typeNameAsNode = importDeclaration.isAsterisk() ? importDeclaration.getName() : importDeclaration.getName().getQualifier().get();
                                                                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/constraintformulas/ExpressionCompatibleWithType.java:286: error: [method.invocation] call to get() not allowed on the given receiver.
                .map(r -> r.getExpression().get())
                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistInterfaceDeclaration.java:253: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return type.orElseThrow(() ->
                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFactory.java:135: error: [method.invocation] call to get() not allowed on the given receiver.
                    Node ancestor = node.getParentNode().get();
                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFactory.java:144: error: [method.invocation] call to get() not allowed on the given receiver.
                if (node.getParentNode().isPresent() && node.getParentNode().get() instanceof ObjectCreationExpr && node.getParentNode().get().getParentNode().isPresent()) {
                                                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/JavaParserFactory.java:145: error: [method.invocation] call to get() not allowed on the given receiver.
                    return getContext(node.getParentNode().get().getParentNode().get(), typeSolver);
                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/SourceFileInfoExtractor.java:183: error: [method.invocation] call to get() not allowed on the given receiver.
        nodes.sort(comparing(n -> n.getBegin().get()));
                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/SourceFileInfoExtractor.java:221: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return node.getRange().map(range -> range.begin.line).orElseThrow(IllegalStateException::new);
                                                                         ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:126: error: [method.invocation] call to get() not allowed on the given receiver.
                && thenExpr.asReferenceType().toUnboxedType().get().in(resolvedPrimitiveTypeSubList)
                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:128: error: [method.invocation] call to get() not allowed on the given receiver.
            return thenExpr.asReferenceType().toUnboxedType().get();
                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:132: error: [method.invocation] call to get() not allowed on the given receiver.
                && elseExpr.asReferenceType().toUnboxedType().get().in(resolvedPrimitiveTypeSubList)
                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:134: error: [method.invocation] call to get() not allowed on the given receiver.
            return elseExpr.asReferenceType().toUnboxedType().get();
                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:141: error: [method.invocation] call to get() not allowed on the given receiver.
                : thenExpr.asReferenceType().toUnboxedType().get();
                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:143: error: [method.invocation] call to get() not allowed on the given receiver.
                : elseExpr.asReferenceType().toUnboxedType().get();
                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/promotion/NumericConditionalExprHandler.java:170: error: [method.invocation] call to get() not allowed on the given receiver.
                        && resolvedType.asReferenceType().toUnboxedType().get() == toType));
                                                                             ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserEnumDeclaration.java:314: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new RuntimeException("Parent context unexpectedly empty."))
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:108: error: [method.invocation] call to get() not allowed on the given receiver.
            ResolvedEnumDeclaration enumDeclaration = node.findAncestor(EnumDeclaration.class).get().resolve().asEnum();
                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:109: error: [method.invocation] call to get() not allowed on the given receiver.
            ResolvedEnumConstantDeclaration resolved = enumDeclaration.getEnumConstants().stream().filter(c -> ((JavaParserEnumConstantDeclaration) c).getWrappedNode() == node).findFirst().get();
                                                                                                                                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:116: error: [method.invocation] call to get() not allowed on the given receiver.
            TypeDeclaration<?> typeDeclaration = (TypeDeclaration<?>) node.getParentNode().get();
                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:122: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new RuntimeException("This constructor cannot be found in its parent. This seems wrong"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:134: error: [method.invocation] call to get() not allowed on the given receiver.
            ResolvedAnnotationDeclaration annotationDeclaration = node.findAncestor(AnnotationDeclaration.class).get().resolve();
                                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:135: error: [method.invocation] call to get() not allowed on the given receiver.
            ResolvedAnnotationMemberDeclaration resolved = annotationDeclaration.getAnnotationMembers().stream().filter(c -> ((JavaParserAnnotationMemberDeclaration) c).getWrappedNode() == node).findFirst().get();
                                                                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/JavaSymbolSolver.java:244: error: [method.invocation] call to get() not allowed on the given receiver.
                CallableDeclaration callableDeclaration = node.findAncestor(CallableDeclaration.class).get();
                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:118: error: [method.invocation] call to get() not allowed on the given receiver.
            return classifyRole(name.getParentNode().get());
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:192: error: [method.invocation] call to get() not allowed on the given receiver.
                (p.hasScope() && p.getScope().get() == c))) {
                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:300: error: [method.invocation] call to get() not allowed on the given receiver.
                (p.hasScope() && p.getScope().get() == c))) {
                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:304: error: [method.invocation] call to get() not allowed on the given receiver.
            return classifyRole(name.getParentNode().get());
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:306: error: [method.invocation] call to get() not allowed on the given receiver.
        throw new UnsupportedOperationException("Unable to classify role of name contained in " + name.getParentNode().get().getClass().getSimpleName());
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:552: error: [method.invocation] call to get() not allowed on the given receiver.
                + name.getParentNode().get().getClass().getSimpleName() + ". See " + name + " at " + name.getRange());
                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:566: error: [method.invocation] call to get() not allowed on the given receiver.
        if (whenParentIs(MethodCallExpr.class, name, (p, c) -> p.hasScope() && p.getScope().get() == c)) {
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:888: error: [method.invocation] call to get() not allowed on the given receiver.
                        ne.hasScope() && ne.getScope().get() == c2)
                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/naming/NameLogic.java:893: error: [method.invocation] call to get() not allowed on the given receiver.
                ne.hasScope() && ne.getScope().get() == c2)) {
                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:68: error: [optional.collection] Don't use Optional to wrap a collection type.
    public static Optional<List<InferenceVariable>> retrieveInferenceVariables(TypeSolver typeSolver, LambdaExpr lambdaExpr) {
                                                    ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:68: error: [optional.collection] Don't use Optional to wrap a collection type.
    public static Optional<List<InferenceVariable>> retrieveInferenceVariables(TypeSolver typeSolver, LambdaExpr lambdaExpr) {
                                                    ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:70: error: [optional.collection] Don't use Optional to wrap a collection type.
            return Optional.empty();
                                 ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:68: error: [optional.collection] Don't use Optional to wrap a collection type.
    public static Optional<List<InferenceVariable>> retrieveInferenceVariables(TypeSolver typeSolver, LambdaExpr lambdaExpr) {
                                                    ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:73: error: [optional.collection] Don't use Optional to wrap a collection type.
            return Optional.empty();
                                 ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:68: error: [optional.collection] Don't use Optional to wrap a collection type.
    public static Optional<List<InferenceVariable>> retrieveInferenceVariables(TypeSolver typeSolver, LambdaExpr lambdaExpr) {
                                                    ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/TypeInferenceCache.java:75: error: [optional.collection] Don't use Optional to wrap a collection type.
        return Optional.of(inferenceVariables.get(typeSolver).get(lambdaExpr));
                          ^
  Use an empty collection to represent the absence of values.
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java:83: error: [method.invocation] call to get() not allowed on the given receiver.
                if (!tryStmt.getFinallyBlock().isPresent() && !canCompleteNormally(tryStmt.getFinallyBlock().get())) {
                                                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java:94: error: [method.invocation] call to get() not allowed on the given receiver.
                if (!tryStmt.getFinallyBlock().isPresent() && !canCompleteNormally(tryStmt.getFinallyBlock().get())) {
                                                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java:168: error: [method.invocation] call to get() not allowed on the given receiver.
                    return canCompleteNormally(n.getThenStmt()) || canCompleteNormally(n.getElseStmt().get());
                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java:220: error: [method.invocation] call to get() not allowed on the given receiver.
                    if (statement.getParentNode().get() instanceof MethodDeclaration) {
                                                     ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/resolution/typeinference/ControlFlowLogic.java:223: error: [method.invocation] call to get() not allowed on the given receiver.
                    if (statement.getParentNode().get() instanceof InitializerDeclaration) {
                                                     ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodCallExprContext.java:83: error: [method.invocation] call to get() not allowed on the given receiver.
            Expression scope = wrappedNode.getScope().get();
                                                         ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/javaparser-bd423833d922c5b28f75dcdc7f292cffb39954d9/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodCallExprContext.java:605: error: [method.invocation] call to get() not allowed on the given receiver.
                    type = type.replaceTypeVariables(entry.a, scope.asReferenceType().getGenericParameterByName(entry.a.getName()).get(), inferredTypes);
                                                                                                                                      ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
79 errors
1 warning
