Running for wpi: 'echo' '"-----------------------------------------------------------"'

"-----------------------------------------------------------"
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
85 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration0' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: warning: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
88 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration1' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: warning: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
88 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration2' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: warning: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
88 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration3' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: warning: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
88 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration4' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java' '-Ainfer=ajava' '-Awarns'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map(ErrorResponse::getErrors).map not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:44: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Optional.ofNullable(errors).map not allowed in deterministic side-effect-free method
                .map(ErrorResponse::getErrors)
                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map(ErrorResponse.Error::getMessage).collect not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:46: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream().map not allowed in deterministic side-effect-free method
                        .map(ErrorResponse.Error::getMessage)
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:45: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting e.stream not allowed in deterministic side-effect-free method
                .map(e -> e.stream()
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:47: warning: [purity.not.deterministic.not.sideeffectfree.call] call to non-deterministic side-effecting Collectors.joining not allowed in deterministic side-effect-free method
                        .collect(Collectors.joining(System.lineSeparator())))
                                                   ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:43: warning: [purity.not.deterministic.call] call to non-deterministic method Optional.ofNullable not allowed in deterministic method
        return Optional.ofNullable(errors)
                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java:48: warning: [purity.not.deterministic.call] call to non-deterministic method String.format not allowed in deterministic method
                .orElse(String.format("Bitbucket responded with an error status (%d)", code));
                                     ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: warning: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: warning: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: warning: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: warning: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: warning: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: warning: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: warning: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
88 warnings
Running for wpi: '/homes/gws/jmsy/checker-framework/checker/bin/javac' '-Xmaxerrs' '10000' '-Xmaxwarns' '10000' '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED' '-Aajava=/tmp/wpi-ajava-20230926-220121-igzgq22q/iteration4' '-classpath' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/h2/h2-2.1.214.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/mssql/mssql-jdbc-11.2.1.jre11.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/jdbc/postgresql/postgresql-42.5.1.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/scanner/sonar-scanner-engine-shaded-9.8.0.63668-all.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-application-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/sonarqube-lib/sonarqube-9.8.0.63668/lib/sonar-shutdowner-9.8.0.63668.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/lib/nodes-0.5.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.29.2-GA/6c32028609e5dd4a1b78e10fbcd122b09b3928b1/javassist-3.29.2-GA.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/logging-interceptor/4.10.0/ae7524eec42d4ab0c3a7cb93da010cf9bcc5007c/logging-interceptor-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.10.0/cd63657ac15770ed1420647154c9f44645533bef/okhttp-4.10.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio-jvm/3.0.0/ab5a73fa2ccb4a36b0b5c69fe10b16d0255bcf8/okio-jvm-3.0.0.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.6.10/e80fe6ac3c3573a80305f5ec43f86b829e8ab53d/kotlin-stdlib-jdk8-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.6.10/e1c380673654a089c4f0c9f83d0ddfdc1efdb498/kotlin-stdlib-jdk7-1.6.10.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.6.20/6cedc143badbb4f1c6b7f5a340b04edff1743208/kotlin-stdlib-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.6.20/27b4562b6713d70f458c6d7ea39aadacb8e6a92b/kotlin-stdlib-common-1.6.20.jar:/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar' '-processor' 'optional' '--release' '11' '--release' '11' '-d' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/classes/java/main' '-deprecation' '-encoding' 'UTF-8' '-h' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/headers/java/main' '-g' '-sourcepath' '' '-s' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/build/generated/sources/annotationProcessor/java/main' '-Xlint:unchecked' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPlugin.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchPluginBootstrap.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityPlatformEditionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/InvalidConfigurationException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/DefaultLinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/LinkHeaderReader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/AzureDevopsRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Comment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentPosition.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThread.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CommentThreadResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Commits.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/CreateCommentThreadRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitPullRequestStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/GitStatusContext.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/IdentityRef.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/PullRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/UpdateCommentThreadStatusRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentThreadStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/CommentType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/enums/GitStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/model/mappers/GitStatusStateMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketException.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/HttpClientBuilderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/AnnotationUploadLimit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/BitbucketConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/CodeInsightsReport.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/DataValue.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportData.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/ReportStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudAnnotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/cloud/CloudCreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/BitbucketServerConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateAnnotationsRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/CreateReportRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ErrorResponse.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/model/server/ServerProperties.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/GithubClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/RepositoryAuthenticationToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/Annotation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/model/CheckRunDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/DefaultUrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/RestApplicationAuthenticationProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/UrlConnectionProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppInstallation.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/AppToken.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/InstallationRepositories.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Owner.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v3/model/Repository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Actor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/AddComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Comments.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/CreateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/DefaultGraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GetRepository.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/MinimizeComment.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/PageInfo.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/UpdateCheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/Viewer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckAnnotationLevel.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckConclusionState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CheckRun.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/CommentClassifiers.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/model/RequestableCheckStatusState.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabClientFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/GitlabRestClient.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Commit.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/CommitNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/DiffRefs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Discussion.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequest.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/MergeRequestNote.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Note.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/PipelineStatus.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/Project.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/model/User.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranch.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityBranchLoaderDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/CommunityReportAnalysisComponentProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DecorationResult.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PostAnalysisIssueVisitor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestBuildStatusDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/PullRequestPostAnalysisTask.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/BaseFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Document.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Formatter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/FormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Heading.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Image.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Link.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/List.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/ListItem.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Node.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Paragraph.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/Text.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisIssueSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/ReportGenerator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ClassReferenceElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/DefaultElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ElevatedClassLoaderFactoryProvider.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ReflectiveElevatedClassLoaderFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfiguration.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchParamsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityProjectBranchesLoader.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/ScannerPullRequestPropertySensor.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/AzureDevopsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/BitbucketPipelinesAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CirrusCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/CodeMagicAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GithubActionsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/GitlabCiAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/autoconfiguration/JenkinsAutoConfigurer.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchFeatureExtension.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityBranchSupportDelegate.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/CommunityComponentKey.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/MonoRepoFeature.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/BitbucketValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GithubValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/GitlabValidator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/Validator.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/AlmTypeMapper.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/DeleteBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetAzureBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBitbucketCloudBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGithubBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetGitlabBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/PullRequestWs.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProjectWsAction.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ProtoBufWriter.java' '/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/PullRequestWsAction.java'

/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/CommunityBranchAgent.java:51: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Component component = Component.fromString(args).orElseThrow(() -> new IllegalArgumentException("Invalid/missing agent argument"));
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:47: warning: [deprecation] configure(MapperFeature,boolean) in ObjectMapper has been deprecated
                .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:56: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("ALM URL must be provided"));
                                                                                                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/azuredevops/DefaultAzureDevopsClientFactory.java:57: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String accessToken = Optional.ofNullable(almSettingDto.getDecryptedPersonalAccessToken(settings.getEncryption())).map(StringUtils::trimToNull).orElseThrow(() -> new IllegalStateException("Personal Access Token must be provided"));
                                                                                                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:81: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    Optional.ofNullable(response.body()).orElseThrow(() -> new IllegalStateException("No response returned by Bitbucket Oauth")).string(), BitbucketCloudClient.AuthToken.class);
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketCloudClient.java:188: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:173: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/BitbucketServerClient.java:188: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                            .orElseThrow(() -> new IllegalStateException("No response body from BitBucket"))
                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:61: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM Repo must be set in configuration"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:68: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "App ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:70: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client ID must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:72: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "Client Secret must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:77: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "ALM slug must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:79: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "URL must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/bitbucket/DefaultBitbucketClientFactory.java:81: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Personal access token must be set in configuration"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:49: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiUrl = Optional.ofNullable(almSettingDto.getUrl()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No URL has been set for Github connections"));
                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:50: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String apiPrivateKey = Optional.ofNullable(almSettingDto.getDecryptedPrivateKey(settings.getEncryption())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No private key has been set for Github connections"));
                                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:51: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectPath = Optional.ofNullable(projectAlmSettingDto.getAlmRepo()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "No repository name has been set for Github connections"));
                                                                                               ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/DefaultGithubClientFactory.java:52: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String appId = Optional.ofNullable(almSettingDto.getAppId()).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "No App ID has been set for Github connections"));
                                                                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:291: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("endLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/github/v4/GraphqlGithubClient.java:290: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .put("startLine", Optional.ofNullable(annotation.getLine()).orElse(0))
                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/almclient/gitlab/DefaultGitlabClientFactory.java:56: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.GLOBAL, "ALM URL must be specified"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/AnalysisDetails.java:112: error: [method.invocation] call to orElseThrow() not allowed on the given receiver.
        return projectAnalysis.getAnalysis().orElseThrow();
                                                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:93: error: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  required: @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
  Consequence: method in @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> get(@Present Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>
    @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>>, @MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> this, @MaybePresent Optional<@MaybePresent Pair<@MaybePresent ComponentIssue, @MaybePresent String>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:158: error: [method.invocation] call to get() not allowed on the given receiver.
                .map(pair -> new ImmutablePair<>(pair.getLeft(), pair.getRight().get()));
                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:165: error: [method.invocation] call to get() not allowed on the given receiver.
                .map(issuePair -> new ImmutablePair<>(issuePair.getLeft(), issuePair.getRight().get()))
                                                                                                   ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:186: error: [methodref.receiver] Incompatible receiver type
                .map(Optional::get)
                     ^
  found   : @Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  required: @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
  Consequence: method in @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> get(@Present Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>
    @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>> apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>>, @MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> this, @MaybePresent Optional<@MaybePresent ImmutableTriple<D extends @MaybePresent Object, N extends @MaybePresent Object, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>>> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/DiscussionAwarePullRequestDecorator.java:245: error: [methodref.receiver] Incompatible receiver type
                    .map(Optional::get)
                         ^
  found   : @Present Optional<@MaybePresent ProjectIssueIdentifier>
  required: @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
  Consequence: method in @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier get(@Present Optional<@MaybePresent ProjectIssueIdentifier> this)
  is not a valid method reference for method in @MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier>
    @MaybePresent ProjectIssueIdentifier apply(@MaybePresent Function<@MaybePresent Optional<@MaybePresent ProjectIssueIdentifier>, @MaybePresent ProjectIssueIdentifier> this, @MaybePresent Optional<@MaybePresent ProjectIssueIdentifier> p0)
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/report/AnalysisSummary.java:206: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                        decimalFormat.format(Optional.ofNullable(getCoverage()).orElse(BigDecimal.valueOf(0))) + "% Estimated after merge)")),
                                                                                                      ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:108: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new IllegalStateException("Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/azuredevops/AzureDevOpsPullRequestDecorator.java:109: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new IllegalStateException("Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:28: error: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent Document>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent Document> this, @MaybePresent Document p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/markup/MarkdownFormatterFactory.java:70: error: [purity.methodref] Incompatible purity declaration
        return this::childContents;
               ^
  Method in @MaybePresent MarkdownFormatterFactory
    @MaybePresent String childContents(@MaybePresent BaseFormatterFactory this, @MaybePresent Node p0)
    is not a valid method reference for method in @MaybePresent Formatter<@MaybePresent ListItem>
    @MaybePresent String format(@MaybePresent Formatter<@MaybePresent ListItem> this, @MaybePresent ListItem p0)
  found   : []
  required: [SIDE_EFFECT_FREE, DETERMINISTIC]
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:114: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Code coverage", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewCoverage()).orElse(BigDecimal.ZERO))));
                                                                                                                                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:116: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        reportData.add(new ReportData("Duplication", new DataValue.Percentage(Optional.ofNullable(analysisSummary.getNewDuplications()).orElse(BigDecimal.ZERO))));
                                                                                                                                              ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:135: error: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                    String path = componentIssue.getComponent().getReportAttributes().getScmPath().orElseThrow();
                                                                                                              ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/bitbucket/BitbucketPullRequestDecorator.java:138: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                            Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0),
                                                                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:89: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                                    .orElse(false));
                                           ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:109: error: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withMessage(Optional.ofNullable(componentIssue.getIssue().getMessage()).orElseThrow().replace("\\","\\\\").replace("\"", "\\\""))
                                                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:108: error: [method.invocation] call to orElseThrow() not allowed on the given receiver.
                .withScmPath(componentIssue.getScmPath().orElseThrow())
                                                                    ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/GithubPullRequestDecorator.java:107: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .withLine(Optional.ofNullable(componentIssue.getIssue().getLine()).orElse(0))
                                                                                         ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/gitlab/GitlabMergeRequestDecorator.java:141: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        Integer line = Optional.ofNullable(issue.getIssue().getLine()).orElseThrow(() -> new IllegalStateException("No line is associated with this issue"));
                                                                                  ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/classloader/ProviderType.java:47: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        return Arrays.stream(values()).filter(v -> v.name().equals(name)).findFirst().orElseThrow(
                                                                                                 ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/BranchConfigurationFactory.java:54: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> MessageException.of("No branch exists in Sonarqube with the name " + targetBranch));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:97: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
        if (null != localSettings.get(ScannerProperties.BRANCH_TARGET)) { //NOSONAR - purposefully checking for a deprecated parameter
                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:98: warning: [deprecation] BRANCH_TARGET in ScannerProperties has been deprecated
            String warning = String.format("Property '%s' is no longer supported", ScannerProperties.BRANCH_TARGET); //NOSONAR - reporting use of deprecated parameter
                                                                                                    ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:110: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_KEY + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/scanner/CommunityBranchConfigurationLoader.java:112: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> MessageException.of(ScannerProperties.PULL_REQUEST_BRANCH + " is required for a pull request analysis"));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:59: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String projectName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmSlug())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository slug must be provided"));
                                                                                                                       ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: warning: [introduce.eliminate] It is bad style to create an Optional just to chain methods to get a value.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/validator/AzureDevopsValidator.java:60: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
        String repositoryName = Optional.ofNullable(StringUtils.trimToNull(projectAlmSettingDto.getAlmRepo())).orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "Repository name must be provided"));
                                                                                                                          ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/SetBindingAction.java:66: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new NotFoundException(format("ALM setting '%s' could not be found", almSetting)));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:64: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, "The ALM setting bound to the project no longer exists"));
                            ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/binding/action/ValidateBindingAction.java:71: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
                    .orElseThrow(() -> new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT, String.format("The %s ALM is not supported by any validators", targetAlm)));
                                ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/DeleteAction.java:63: error: [method.invocation] call to <X>orElseThrow(java.util.function.Supplier<? extends X>) not allowed on the given receiver.
            .orElseThrow(() -> new NotFoundException(String.format("Pull request '%s' is not found for project '%s'", pullRequestId, project.getKey())));
                        ^
  found   : @MaybePresent Optional</*RAW*/>
  required: @Present Optional</*RAW*/>
/scratch/jmsy/outdir/sonarqube-community-branch-plugin-344a37f1adf82315f640c51c326b6a9d9de22dd9/sonarqube-community-branch-plugin/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/pullrequest/action/ListAction.java:63: error: [purity.methodref] Incompatible purity declaration
        this(dbClient, componentFinder, userSession, WsUtils::writeProtobuf);
                                                     ^
  Method in @MaybePresent WsUtils
    void writeProtobuf(@MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
    is not a valid method reference for method in @MaybePresent ProtoBufWriter
    void write(@MaybePresent ProtoBufWriter this, @MaybePresent Message p0, @MaybePresent Request p1, @MaybePresent Response p2)
  found   : []
  required: [SIDE_EFFECT_FREE]
44 errors
36 warnings
